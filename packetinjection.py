from scapy.all import *

# Prompt user for input values
frame_type = int(input("Enter the Frame Type for Injection (0-Management, 1-Control, 2-Data): "))

if frame_type == 0:
    # Management frames
    print("Management frames Subtypes:")
    print("0: Association Request")
    print("1: Association Response")
    print("2: Reassociation Request")
    print("3: Reassociation Response")
    print("4: Probe Request")
    print("5: Probe Response")
    print("6: Beacon")
    print("7: Announcement Traffic Indication Map (ATIM)")
    print("8: Disassociation")
    print("9: Authentication")
    print("10: Deauthentication")
    print("11: Action")
elif frame_type == 1:
    # Control frames
    print("Control frames Subtypes:")
    print("8: Block Acknowledgment Request")
    print("9: Block Acknowledgment")
    print("10: Power Save Poll")
    print("11: Request to Send (RTS)")
    print("12: Clear to Send (CTS)")
    print("13: Acknowledgment (ACK)")
    print("14: Content (Contention-Free)")
    print("15: Content (Contention-Free + Acknowledgment)")
elif frame_type == 2:
    # Data frames
    print("Data frames Subtypes:")
    print("0: Data")
    print("1: Data + CF-Ack (Contention-Free Acknowledgment)")
    print("2: Data + CF-Poll (Contention-Free Poll)")
    print("3: Data + CF-Ack + CF-Poll (Contention-Free Acknowledgment and Poll)")
    print("4: Null Data")
    print("5: CF-Ack (Contention-Free Acknowledgment)")
    print("6: CF-Poll (Contention-Free Poll)")
    print("7: CF-Ack + CF-Poll (Contention-Free Acknowledgment and Poll)")
else:
    print("Invalid frame type!")

subtype = int(input("Enter the Subtype: "))
destination_mac = input("Enter the Destination MAC Address: ")
source_mac = input("Enter the Source MAC Address: ")
bssid = input("Enter Router BSSID:")
packet_count = int(input("Enter the Packet Counts to Send: "))
packet_interval = float(input("Enter the Packet Interval (Per Second): "))
interface = input("Enter the Wireless Interface Name: ")

# Prompt user for payload type
payload_type = input("Enter Payload Type (ICMP/UDP/DNS/HTTP/HTTPS/ARP): ")

# Prompt user for destination/source ports and transport protocol
if payload_type in ['UDP', 'DNS']:
    dst_port = int(input("Enter Destination Port: "))
    src_port = int(input("Enter Source Port: "))
    transport_protocol = UDP
elif payload_type in ['HTTP', 'HTTPS']:
    dst_port = 80  # Default HTTP port
    src_port = int(input("Enter Source Port: "))
    transport_protocol = TCP
else:
    dst_port = None
    src_port = None
    transport_protocol = None

# Create payload based on user input
if payload_type == 'ICMP':
    icmp_type = int(input("Enter ICMP Type: "))
    icmp_code = int(input("Enter ICMP Code: "))
    payload = IP(src="192.168.1.1", dst="192.168.1.4") / ICMP(type=icmp_type, code=icmp_code)
elif payload_type == 'UDP':
    payload = IP(src="192.168.1.1", dst="192.168.1.4") / transport_protocol(sport=src_port, dport=dst_port)
elif payload_type == 'DNS':
    dns_qname = input("Enter DNS Query Name: ")
    dns_spoof = input("Enter DNS Spoof IP: ")
    dns_payload = IP(src="192.168.1.1", dst="192.168.1.4") / UDP(sport=src_port, dport=dst_port) / DNS(qd=DNSQR(qname=dns_qname), an=DNSRR(rrname=dns_qname, rdata=dns_spoof)), DNS(qd=DNSQR(qname="example.com"))
elif payload_type == 'HTTP':
    http_method = input("Enter HTTP Method (GET/POST/PUT/DELETE/HEAD/OPTIONS/PATCH): ")
    http_path = input("Enter HTTP Path: ")
    http_host = input("Enter HTTP Host: ")
    http_payload = f"{http_method} {http_path} HTTP/1.1\r\nHost: {http_host}\r\n\r\n"
    payload = IP(src="192.168.1.1", dst="192.168.1.4") / TCP(sport=src_port, dport=dst_port) / http_payload
elif payload_type == 'HTTPS':
    https_method = input("Enter HTTPS Method (GET/POST/PUT/DELETE/HEAD/OPTIONS/PATCH): ")
    https_path = input("Enter HTTPS Path: ")
    https_host = input("Enter HTTPS Host: ")
    https_payload = f"{https_method} {https_path} HTTP/1.1\r\nHost: {https_host}\r\n\r\n"
    payload = IP(src="192.168.1.1", dst="192.168.1.4") / TCP(sport=src_port, dport=dst_port) / https_payload
elif payload_type == 'ARP':
    arp_op = int(input("Enter ARP Operation (1-Request, 2-Reply): "))
    arp_dst_ip = input("Enter ARP Destination IP: ")
    arp_src_ip = input("Enter ARP Source IP: ")
    payload = ARP(op=arp_op, pdst=arp_dst_ip, psrc=arp_src_ip)
else:
    print("Invalid payload type!")

# Create Dot11 frame
dot11 = Dot11(type=frame_type, subtype=subtype, addr1=destination_mac, addr2=source_mac, addr3=bssid)

# Combine frame and payload
packet = RadioTap() / dot11 / payload

# Send the packet
print("Injecting Packets")
if sendp(packet, iface=interface, count=packet_count, inter=packet_interval) == packet_count:
    print('Packet Injection Successful')
else:
    print('Packet Injection Failed')

